
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package javalette;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\004\003\000\002\004\004\000\002\005\004" +
    "\000\002\006\002\000\002\006\003\000\002\006\005\000" +
    "\002\007\005\000\002\010\002\000\002\010\004\000\002" +
    "\011\003\000\002\011\003\000\002\011\005\000\002\011" +
    "\006\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\004\000\002\011\007\000\002\011\011\000" +
    "\002\011\007\000\002\011\012\000\002\011\004\000\002" +
    "\012\003\000\002\012\005\000\002\013\003\000\002\013" +
    "\005\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\004\000\002\015\002\000" +
    "\002\015\003\000\002\015\005\000\002\016\003\000\002" +
    "\016\003\000\002\016\005\000\002\016\005\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\006\000\002\016\003\000\002\016\005\000" +
    "\002\017\005\000\002\020\003\000\002\020\004\000\002" +
    "\021\004\000\002\021\004\000\002\021\003\000\002\022" +
    "\005\000\002\022\003\000\002\023\005\000\002\023\003" +
    "\000\002\024\005\000\002\024\003\000\002\025\005\000" +
    "\002\025\003\000\002\026\005\000\002\026\003\000\002" +
    "\027\002\000\002\027\003\000\002\027\005\000\002\030" +
    "\003\000\002\030\003\000\002\031\006\000\002\032\003" +
    "\000\002\032\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\012\040\010\041\006\046\004\052\011\001" +
    "\002\000\010\016\uffe4\020\uffe4\057\uffe4\001\002\000\006" +
    "\016\016\057\017\001\002\000\010\016\uffe3\020\uffe3\057" +
    "\uffe3\001\002\000\004\002\015\001\002\000\010\016\uffe2" +
    "\020\uffe2\057\uffe2\001\002\000\010\016\uffe1\020\uffe1\057" +
    "\uffe1\001\002\000\004\002\000\001\002\000\014\002\ufffe" +
    "\040\010\041\006\046\004\052\011\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\001\001\002\000\010\016\uffe0" +
    "\020\uffe0\057\uffe0\001\002\000\004\004\020\001\002\000" +
    "\014\005\ufffb\040\010\041\006\046\004\052\011\001\002" +
    "\000\006\016\016\057\207\001\002\000\006\005\ufffa\006" +
    "\205\001\002\000\004\005\024\001\002\000\004\007\025" +
    "\001\002\000\054\004\ufff7\007\ufff7\010\ufff7\011\ufff7\022" +
    "\ufff7\023\ufff7\040\ufff7\041\ufff7\043\ufff7\044\ufff7\045\ufff7" +
    "\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054" +
    "\ufff7\055\ufff7\056\ufff7\057\ufff7\001\002\000\014\002\uffff" +
    "\040\uffff\041\uffff\046\uffff\052\uffff\001\002\000\054\004" +
    "\057\007\025\010\055\011\054\022\052\023\047\040\010" +
    "\041\006\043\042\044\041\045\035\046\004\047\032\050" +
    "\030\051\062\052\011\053\060\054\033\055\031\056\051" +
    "\057\040\001\002\000\030\004\057\011\203\022\052\023" +
    "\047\043\042\047\032\051\062\054\033\055\031\056\051" +
    "\057\067\001\002\000\050\005\uffd8\006\uffd8\011\uffd8\017" +
    "\uffd8\020\uffd8\021\uffd8\022\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035" +
    "\uffd8\036\uffd8\037\uffd8\001\002\000\012\040\010\041\006" +
    "\046\004\052\011\001\002\000\050\005\uffd3\006\uffd3\011" +
    "\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\024\uffd3\025\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\001\002\000\050\005\uffcc" +
    "\006\uffcc\011\uffcc\017\123\020\122\021\uffcc\022\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\001\002\000" +
    "\004\004\165\001\002\000\044\005\uffca\006\uffca\011\uffca" +
    "\021\uffca\022\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\001\002\000\044\005\uffc8\006\uffc8\011\uffc8\021" +
    "\uffc8\022\uffc8\024\uffc8\025\uffc8\026\uffc8\027\152\030\153" +
    "\031\151\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\001\002\000\052\004\073\011\uffdc\012\uffbe\013\uffbe" +
    "\014\uffbe\017\uffdc\020\uffdc\022\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\001\002\000\004\004\156\001" +
    "\002\000\050\005\uffd5\006\uffd5\011\uffd5\017\uffd5\020\uffd5" +
    "\021\uffd5\022\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\001\002\000\036\005\uffc6\006\uffc6\011\uffc6\021" +
    "\uffc6\022\146\024\uffc6\025\uffc6\026\145\032\uffc6\033\uffc6" +
    "\034\uffc6\035\uffc6\036\uffc6\037\uffc6\001\002\000\032\005" +
    "\uffc4\006\uffc4\011\uffc4\021\uffc4\024\135\025\uffc4\032\133" +
    "\033\142\034\141\035\140\036\137\037\136\001\002\000" +
    "\014\005\uffc2\006\uffc2\011\uffc2\021\uffc2\025\131\001\002" +
    "\000\054\004\ufff6\007\ufff6\010\ufff6\011\ufff6\022\ufff6\023" +
    "\ufff6\040\ufff6\041\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6" +
    "\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055" +
    "\ufff6\056\ufff6\057\ufff6\001\002\000\022\004\057\043\042" +
    "\047\032\051\062\054\033\055\031\056\051\057\067\001" +
    "\002\000\004\011\127\001\002\000\050\005\uffd7\006\uffd7" +
    "\011\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\037\uffd7\001\002\000\022\004" +
    "\057\043\042\047\032\051\062\054\033\055\031\056\051" +
    "\057\067\001\002\000\006\016\016\057\112\001\002\000" +
    "\056\004\ufff5\007\ufff5\010\ufff5\011\ufff5\022\ufff5\023\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046" +
    "\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5" +
    "\055\ufff5\056\ufff5\057\ufff5\001\002\000\060\002\ufff8\004" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\022\ufff8\023\ufff8\040\ufff8" +
    "\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047" +
    "\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8" +
    "\056\ufff8\057\ufff8\001\002\000\050\011\uffdb\012\uffbd\013" +
    "\uffbd\014\uffbd\017\uffdb\020\uffdb\022\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\001\002\000\026\004\057" +
    "\022\052\023\047\043\042\047\032\051\062\054\033\055" +
    "\031\056\051\057\067\001\002\000\004\004\103\001\002" +
    "\000\056\004\ufff4\007\ufff4\010\ufff4\011\ufff4\022\ufff4\023" +
    "\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4" +
    "\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054" +
    "\ufff4\055\ufff4\056\ufff4\057\ufff4\001\002\000\050\005\uffd6" +
    "\006\uffd6\011\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\024" +
    "\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\001\002\000" +
    "\010\012\066\013\065\014\064\001\002\000\004\011\102" +
    "\001\002\000\004\011\101\001\002\000\026\004\057\022" +
    "\052\023\047\043\042\047\032\051\062\054\033\055\031" +
    "\056\051\057\067\001\002\000\052\004\073\005\uffdc\006" +
    "\uffdc\011\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\001\002\000\004" +
    "\011\072\001\002\000\050\005\uffdb\006\uffdb\011\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\001\002\000\056\004\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\022\ufff2\023\ufff2\040\ufff2\041\ufff2\042" +
    "\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2" +
    "\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057" +
    "\ufff2\001\002\000\030\004\057\005\uffc1\022\052\023\047" +
    "\043\042\047\032\051\062\054\033\055\031\056\051\057" +
    "\067\001\002\000\006\005\uffc0\006\077\001\002\000\004" +
    "\005\076\001\002\000\050\005\uffd4\006\uffd4\011\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\001\002\000\030\004\057\005\uffc1" +
    "\022\052\023\047\043\042\047\032\051\062\054\033\055" +
    "\031\056\051\057\067\001\002\000\004\005\uffbf\001\002" +
    "\000\056\004\ufff1\007\ufff1\010\ufff1\011\ufff1\022\ufff1\023" +
    "\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1" +
    "\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054" +
    "\ufff1\055\ufff1\056\ufff1\057\ufff1\001\002\000\056\004\ufff0" +
    "\007\ufff0\010\ufff0\011\ufff0\022\ufff0\023\ufff0\040\ufff0\041" +
    "\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0" +
    "\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056" +
    "\ufff0\057\ufff0\001\002\000\026\004\057\022\052\023\047" +
    "\043\042\047\032\051\062\054\033\055\031\056\051\057" +
    "\067\001\002\000\004\005\105\001\002\000\052\004\057" +
    "\007\025\011\054\022\052\023\047\040\010\041\006\043" +
    "\042\044\041\045\035\046\004\047\032\050\030\051\062" +
    "\052\011\053\060\054\033\055\031\056\051\057\040\001" +
    "\002\000\056\004\uffeb\007\uffeb\010\uffeb\011\uffeb\022\uffeb" +
    "\023\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045" +
    "\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb" +
    "\054\uffeb\055\uffeb\056\uffeb\057\uffeb\001\002\000\004\005" +
    "\110\001\002\000\050\005\uffd2\006\uffd2\011\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\024\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\001\002\000\006\006\117\011\uffe6\001" +
    "\002\000\010\006\uffe8\011\uffe8\012\115\001\002\000\004" +
    "\011\114\001\002\000\056\004\ufff3\007\ufff3\010\ufff3\011" +
    "\ufff3\022\ufff3\023\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3" +
    "\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052" +
    "\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\001\002" +
    "\000\026\004\057\022\052\023\047\043\042\047\032\051" +
    "\062\054\033\055\031\056\051\057\067\001\002\000\006" +
    "\006\uffe7\011\uffe7\001\002\000\004\057\112\001\002\000" +
    "\004\011\uffe5\001\002\000\050\005\uffce\006\uffce\011\uffce" +
    "\017\123\020\122\021\uffce\022\uffce\024\uffce\025\uffce\026" +
    "\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\001\002\000\026\004\057\022" +
    "\052\023\047\043\042\047\032\051\062\054\033\055\031" +
    "\056\051\057\067\001\002\000\004\057\124\001\002\000" +
    "\050\005\uffda\006\uffda\011\uffda\017\uffda\020\uffda\021\uffda" +
    "\022\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\001\002\000\004\021\126\001\002\000\056\005\uffbc\006" +
    "\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\017\uffbc\020\uffbc" +
    "\021\uffbc\022\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030" +
    "\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\037\uffbc\001\002\000\056\004\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\022\uffe9\023\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9" +
    "\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052" +
    "\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\001\002" +
    "\000\050\005\uffcd\006\uffcd\011\uffcd\017\123\020\122\021" +
    "\uffcd\022\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\001\002\000\026\004\057\022\052\023\047\043\042" +
    "\047\032\051\062\054\033\055\031\056\051\057\067\001" +
    "\002\000\012\005\uffc3\006\uffc3\011\uffc3\021\uffc3\001\002" +
    "\000\026\004\uffb6\022\uffb6\023\uffb6\043\uffb6\047\uffb6\051" +
    "\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\001\002\000\026" +
    "\004\057\022\052\023\047\043\042\047\032\051\062\054" +
    "\033\055\031\056\051\057\067\001\002\000\026\004\057" +
    "\022\052\023\047\043\042\047\032\051\062\054\033\055" +
    "\031\056\051\057\067\001\002\000\026\004\uffb1\022\uffb1" +
    "\023\uffb1\043\uffb1\047\uffb1\051\uffb1\054\uffb1\055\uffb1\056" +
    "\uffb1\057\uffb1\001\002\000\026\004\uffb2\022\uffb2\023\uffb2" +
    "\043\uffb2\047\uffb2\051\uffb2\054\uffb2\055\uffb2\056\uffb2\057" +
    "\uffb2\001\002\000\026\004\uffb3\022\uffb3\023\uffb3\043\uffb3" +
    "\047\uffb3\051\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\001" +
    "\002\000\026\004\uffb4\022\uffb4\023\uffb4\043\uffb4\047\uffb4" +
    "\051\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\001\002\000" +
    "\026\004\uffb5\022\uffb5\023\uffb5\043\uffb5\047\uffb5\051\uffb5" +
    "\054\uffb5\055\uffb5\056\uffb5\057\uffb5\001\002\000\014\005" +
    "\uffc5\006\uffc5\011\uffc5\021\uffc5\025\uffc5\001\002\000\036" +
    "\005\uffc7\006\uffc7\011\uffc7\021\uffc7\022\146\024\uffc7\025" +
    "\uffc7\026\145\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\001\002\000\026\004\uffbb\022\uffbb\023\uffbb\043" +
    "\uffbb\047\uffbb\051\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\001\002\000\026\004\uffba\022\uffba\023\uffba\043\uffba\047" +
    "\uffba\051\uffba\054\uffba\055\uffba\056\uffba\057\uffba\001\002" +
    "\000\026\004\057\022\052\023\047\043\042\047\032\051" +
    "\062\054\033\055\031\056\051\057\067\001\002\000\044" +
    "\005\uffc9\006\uffc9\011\uffc9\021\uffc9\022\uffc9\024\uffc9\025" +
    "\uffc9\026\uffc9\027\152\030\153\031\151\032\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\037\uffc9\001\002\000\026\004" +
    "\uffb7\022\uffb7\023\uffb7\043\uffb7\047\uffb7\051\uffb7\054\uffb7" +
    "\055\uffb7\056\uffb7\057\uffb7\001\002\000\026\004\uffb9\022" +
    "\uffb9\023\uffb9\043\uffb9\047\uffb9\051\uffb9\054\uffb9\055\uffb9" +
    "\056\uffb9\057\uffb9\001\002\000\026\004\uffb8\022\uffb8\023" +
    "\uffb8\043\uffb8\047\uffb8\051\uffb8\054\uffb8\055\uffb8\056\uffb8" +
    "\057\uffb8\001\002\000\026\004\057\022\052\023\047\043" +
    "\042\047\032\051\062\054\033\055\031\056\051\057\067" +
    "\001\002\000\044\005\uffcb\006\uffcb\011\uffcb\021\uffcb\022" +
    "\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb" +
    "\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\001" +
    "\002\000\012\040\010\041\006\046\004\052\011\001\002" +
    "\000\006\016\016\057\160\001\002\000\004\015\161\001" +
    "\002\000\026\004\057\022\052\023\047\043\042\047\032" +
    "\051\062\054\033\055\031\056\051\057\067\001\002\000" +
    "\004\005\163\001\002\000\052\004\057\007\025\011\054" +
    "\022\052\023\047\040\010\041\006\043\042\044\041\045" +
    "\035\046\004\047\032\050\030\051\062\052\011\053\060" +
    "\054\033\055\031\056\051\057\040\001\002\000\056\004" +
    "\uffea\007\uffea\010\uffea\011\uffea\022\uffea\023\uffea\040\uffea" +
    "\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047" +
    "\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea" +
    "\056\uffea\057\uffea\001\002\000\026\004\057\022\052\023" +
    "\047\043\042\047\032\051\062\054\033\055\031\056\051" +
    "\057\067\001\002\000\004\005\167\001\002\000\052\004" +
    "\057\007\025\011\054\022\052\023\047\040\010\041\006" +
    "\043\042\044\041\045\035\046\004\047\032\050\030\051" +
    "\062\052\011\053\060\054\033\055\031\056\051\057\040" +
    "\001\002\000\056\004\uffed\007\uffed\010\uffed\011\uffed\022" +
    "\uffed\023\uffed\040\uffed\041\uffed\042\171\043\uffed\044\uffed" +
    "\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053" +
    "\uffed\054\uffed\055\uffed\056\uffed\057\uffed\001\002\000\052" +
    "\004\057\007\025\011\054\022\052\023\047\040\010\041" +
    "\006\043\042\044\041\045\035\046\004\047\032\050\030" +
    "\051\062\052\011\053\060\054\033\055\031\056\051\057" +
    "\040\001\002\000\056\004\uffec\007\uffec\010\uffec\011\uffec" +
    "\022\uffec\023\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044" +
    "\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec" +
    "\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\001\002\000" +
    "\006\016\016\020\176\001\002\000\050\005\uffd0\006\uffd0" +
    "\011\uffd0\017\uffd0\020\176\021\uffd0\022\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\037\uffd0\001\002\000\050\005" +
    "\uffd9\006\uffd9\011\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\001\002" +
    "\000\026\004\057\022\052\023\047\043\042\047\032\051" +
    "\062\054\033\055\031\056\051\057\067\001\002\000\004" +
    "\021\200\001\002\000\050\005\uffd1\006\uffd1\011\uffd1\017" +
    "\uffd1\020\uffd1\021\uffd1\022\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\037\uffd1\001\002\000\050\005\uffcf\006\uffcf" +
    "\011\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\001\002\000\004\011" +
    "\204\001\002\000\056\004\uffee\007\uffee\010\uffee\011\uffee" +
    "\022\uffee\023\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044" +
    "\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee\052\uffee" +
    "\053\uffee\054\uffee\055\uffee\056\uffee\057\uffee\001\002\000" +
    "\056\004\uffef\007\uffef\010\uffef\011\uffef\022\uffef\023\uffef" +
    "\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046" +
    "\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef" +
    "\055\uffef\056\uffef\057\uffef\001\002\000\014\005\ufffb\040" +
    "\010\041\006\046\004\052\011\001\002\000\004\005\ufff9" +
    "\001\002\000\006\005\ufffc\006\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\012\002\006\003\012\004\011\014\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\012\004\013\014\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\021\006\022\014\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\025\001\001\000\004\010\026\001\001\000\002" +
    "\001\001\000\032\007\060\011\045\014\052\016\033\021" +
    "\035\022\036\023\042\024\043\025\044\026\047\030\062" +
    "\031\055\001\001\000\022\016\033\021\035\022\036\023" +
    "\042\024\043\025\044\026\201\031\070\001\001\000\002" +
    "\001\001\000\004\014\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\146\001\001\000\004\034\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\127\031\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\120\031\070\001\001\000\006\012\110\013" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\016\033\021\035\022\036\023\042\024" +
    "\043\025\044\026\106\031\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\016\033\021\035" +
    "\022\036\023\042\024\043\025\044\026\067\031\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\016\033\021\035\022\036\023" +
    "\042\024\043\025\044\026\073\027\074\031\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\016\033\021\035\022\036\023\042\024\043\025\044" +
    "\026\073\027\077\031\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\016\033\021\035" +
    "\022\036\023\042\024\043\025\044\026\103\031\070\001" +
    "\001\000\002\001\001\000\032\007\060\011\105\014\052" +
    "\016\033\021\035\022\036\023\042\024\043\025\044\026" +
    "\047\030\062\031\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\016\033" +
    "\021\035\022\036\023\042\024\043\025\044\026\115\031" +
    "\070\001\001\000\002\001\001\000\006\012\110\013\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\016" +
    "\033\021\035\022\036\023\042\024\043\025\044\026\124" +
    "\031\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\016\033\021\035\022\036\023\042\024" +
    "\043\025\044\026\131\031\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\016\033\021\035\022\036\023" +
    "\143\031\070\001\001\000\020\016\033\021\035\022\036" +
    "\023\042\024\043\025\142\031\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\033" +
    "\021\035\022\147\031\070\001\001\000\004\033\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\033\021\154\031\070\001\001\000\002\001" +
    "\001\000\004\014\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\016\033\021\035\022\036\023\042\024" +
    "\043\025\044\026\161\031\070\001\001\000\002\001\001" +
    "\000\032\007\060\011\163\014\052\016\033\021\035\022" +
    "\036\023\042\024\043\025\044\026\047\030\062\031\055" +
    "\001\001\000\002\001\001\000\022\016\033\021\035\022" +
    "\036\023\042\024\043\025\044\026\165\031\070\001\001" +
    "\000\002\001\001\000\032\007\060\011\167\014\052\016" +
    "\033\021\035\022\036\023\042\024\043\025\044\026\047" +
    "\030\062\031\055\001\001\000\002\001\001\000\032\007" +
    "\060\011\171\014\052\016\033\021\035\022\036\023\042" +
    "\024\043\025\044\026\047\030\062\031\055\001\001\000" +
    "\002\001\001\000\006\017\173\020\174\001\001\000\006" +
    "\017\173\020\200\001\001\000\002\001\001\000\022\016" +
    "\033\021\035\022\036\023\042\024\043\025\044\026\176" +
    "\031\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\021\006\205\014\020\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public javalette.Absyn.Prog pProg() throws Exception
  {
    java_cup.runtime.Symbol res = parse();
    return (javalette.Absyn.Prog) res.value;
  }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
  report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
  throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


public java_cup.runtime.ComplexSymbolFactory.Location getLeftLocation(
    java_cup.runtime.ComplexSymbolFactory.Location ... locations) {
  for (java_cup.runtime.ComplexSymbolFactory.Location l : locations) {
    if (l != null) {
      return l;
    }
  }
  return null;
}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Prog EOF 
            {
              Object RESULT =null;
		javalette.Absyn.Prog start_val = (javalette.Absyn.Prog)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Prog ::= ListTopDef 
            {
              javalette.Absyn.Prog RESULT =null;
		javalette.Absyn.ListTopDef p_1 = (javalette.Absyn.ListTopDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.Program(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prog",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TopDef ::= Type _IDENT_ _SYMB_0 ListArg _SYMB_1 Blk 
            {
              javalette.Absyn.TopDef RESULT =null;
		javalette.Absyn.Type p_1 = (javalette.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		javalette.Absyn.ListArg p_4 = (javalette.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		javalette.Absyn.Blk p_6 = (javalette.Absyn.Blk)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.FnDef(p_1,p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TopDef",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListTopDef ::= TopDef 
            {
              javalette.Absyn.ListTopDef RESULT =null;
		javalette.Absyn.TopDef p_1 = (javalette.Absyn.TopDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.ListTopDef(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTopDef",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListTopDef ::= TopDef ListTopDef 
            {
              javalette.Absyn.ListTopDef RESULT =null;
		javalette.Absyn.TopDef p_1 = (javalette.Absyn.TopDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		javalette.Absyn.ListTopDef p_2 = (javalette.Absyn.ListTopDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTopDef",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Arg ::= Type _IDENT_ 
            {
              javalette.Absyn.Arg RESULT =null;
		javalette.Absyn.Type p_1 = (javalette.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.Argument(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListArg ::= 
            {
              javalette.Absyn.ListArg RESULT =null;
		 RESULT = new javalette.Absyn.ListArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListArg ::= Arg 
            {
              javalette.Absyn.ListArg RESULT =null;
		javalette.Absyn.Arg p_1 = (javalette.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.ListArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ListArg ::= Arg _SYMB_2 ListArg 
            {
              javalette.Absyn.ListArg RESULT =null;
		javalette.Absyn.Arg p_1 = (javalette.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		javalette.Absyn.ListArg p_3 = (javalette.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Blk ::= _SYMB_3 ListStmt _SYMB_4 
            {
              javalette.Absyn.Blk RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		javalette.Absyn.ListStmt p_2 = (javalette.Absyn.ListStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.Block(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Blk",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ListStmt ::= 
            {
              javalette.Absyn.ListStmt RESULT =null;
		 RESULT = new javalette.Absyn.ListStmt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStmt",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ListStmt ::= ListStmt Stmt 
            {
              javalette.Absyn.ListStmt RESULT =null;
		javalette.Absyn.ListStmt p_1 = (javalette.Absyn.ListStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		javalette.Absyn.Stmt p_2 = (javalette.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStmt",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Stmt ::= _SYMB_5 
            {
              javalette.Absyn.Stmt RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.Empty(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Stmt ::= Blk 
            {
              javalette.Absyn.Stmt RESULT =null;
		javalette.Absyn.Blk p_1 = (javalette.Absyn.Blk)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.BStmt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Stmt ::= Type ListItem _SYMB_5 
            {
              javalette.Absyn.Stmt RESULT =null;
		javalette.Absyn.Type p_1 = (javalette.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		javalette.Absyn.ListItem p_2 = (javalette.Absyn.ListItem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.Decl(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Stmt ::= Lhs _SYMB_6 Expr _SYMB_5 
            {
              javalette.Absyn.Stmt RESULT =null;
		javalette.Absyn.Lhs p_1 = (javalette.Absyn.Lhs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		javalette.Absyn.Expr p_3 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.Ass(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Stmt ::= Lhs _SYMB_7 _SYMB_5 
            {
              javalette.Absyn.Stmt RESULT =null;
		javalette.Absyn.Lhs p_1 = (javalette.Absyn.Lhs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.Incr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Stmt ::= Lhs _SYMB_8 _SYMB_5 
            {
              javalette.Absyn.Stmt RESULT =null;
		javalette.Absyn.Lhs p_1 = (javalette.Absyn.Lhs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.Decr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Stmt ::= _SYMB_36 Expr _SYMB_5 
            {
              javalette.Absyn.Stmt RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		javalette.Absyn.Expr p_2 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.Ret(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Stmt ::= _SYMB_36 _SYMB_5 
            {
              javalette.Absyn.Stmt RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.VRet(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Stmt ::= _SYMB_33 _SYMB_0 Expr _SYMB_1 Stmt 
            {
              javalette.Absyn.Stmt RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		javalette.Absyn.Expr p_3 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		javalette.Absyn.Stmt p_5 = (javalette.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.Cond(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Stmt ::= _SYMB_33 _SYMB_0 Expr _SYMB_1 Stmt _SYMB_30 Stmt 
            {
              javalette.Absyn.Stmt RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		javalette.Absyn.Expr p_3 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		javalette.Absyn.Stmt p_5 = (javalette.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		javalette.Absyn.Stmt p_7 = (javalette.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.CondElse(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stmt ::= _SYMB_39 _SYMB_0 Expr _SYMB_1 Stmt 
            {
              javalette.Absyn.Stmt RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		javalette.Absyn.Expr p_3 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		javalette.Absyn.Stmt p_5 = (javalette.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.While(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Stmt ::= _SYMB_32 _SYMB_0 Type _IDENT_ _SYMB_9 Expr _SYMB_1 Stmt 
            {
              javalette.Absyn.Stmt RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		javalette.Absyn.Type p_3 = (javalette.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		javalette.Absyn.Expr p_6 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		javalette.Absyn.Stmt p_8 = (javalette.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.For(p_3,p_4,p_6,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Stmt ::= Expr _SYMB_5 
            {
              javalette.Absyn.Stmt RESULT =null;
		javalette.Absyn.Expr p_1 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.SExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Item ::= _IDENT_ 
            {
              javalette.Absyn.Item RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.NoInit(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Item",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Item ::= _IDENT_ _SYMB_6 Expr 
            {
              javalette.Absyn.Item RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		javalette.Absyn.Expr p_3 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.Init(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Item",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListItem ::= Item 
            {
              javalette.Absyn.ListItem RESULT =null;
		javalette.Absyn.Item p_1 = (javalette.Absyn.Item)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.ListItem(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListItem",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListItem ::= Item _SYMB_2 ListItem 
            {
              javalette.Absyn.ListItem RESULT =null;
		javalette.Absyn.Item p_1 = (javalette.Absyn.Item)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		javalette.Absyn.ListItem p_3 = (javalette.Absyn.ListItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListItem",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Type ::= _SYMB_34 
            {
              javalette.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.Int(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Type ::= _SYMB_29 
            {
              javalette.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.Doub(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Type ::= _SYMB_28 
            {
              javalette.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.Bool(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Type ::= _SYMB_38 
            {
              javalette.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.Void(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Type ::= Type _SYMB_10 
            {
              javalette.Absyn.Type RESULT =null;
		javalette.Absyn.Type p_1 = (javalette.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.ArrType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListType ::= 
            {
              javalette.Absyn.ListType RESULT =null;
		 RESULT = new javalette.Absyn.ListType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListType",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ListType ::= Type 
            {
              javalette.Absyn.ListType RESULT =null;
		javalette.Absyn.Type p_1 = (javalette.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.ListType(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListType",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ListType ::= Type _SYMB_2 ListType 
            {
              javalette.Absyn.ListType RESULT =null;
		javalette.Absyn.Type p_1 = (javalette.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		javalette.Absyn.ListType p_3 = (javalette.Absyn.ListType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListType",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expr6 ::= _IDENT_ 
            {
              javalette.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.EVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr6",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expr6 ::= Index 
            {
              javalette.Absyn.Expr RESULT =null;
		javalette.Absyn.Index p_1 = (javalette.Absyn.Index)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.EIndex(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr6",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expr6 ::= Expr6 _SYMB_11 _IDENT_ 
            {
              javalette.Absyn.Expr RESULT =null;
		javalette.Absyn.Expr p_1 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.ELength(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr6",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr6 ::= _SYMB_35 Type ListDim 
            {
              javalette.Absyn.Expr RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		javalette.Absyn.Type p_2 = (javalette.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		javalette.Absyn.ListDim p_3 = (javalette.Absyn.ListDim)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.ELitArr(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr6",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr6 ::= _INTEGER_ 
            {
              javalette.Absyn.Expr RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.ELitInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr6",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr6 ::= _DOUBLE_ 
            {
              javalette.Absyn.Expr RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.ELitDoub(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr6",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expr6 ::= _SYMB_37 
            {
              javalette.Absyn.Expr RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.ELitTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr6",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expr6 ::= _SYMB_31 
            {
              javalette.Absyn.Expr RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.ELitFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr6",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expr6 ::= _IDENT_ _SYMB_0 ListExpr _SYMB_1 
            {
              javalette.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		javalette.Absyn.ListExpr p_3 = (javalette.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.EApp(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr6",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr6 ::= _STRING_ 
            {
              javalette.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.EString(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr6",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr6 ::= _SYMB_0 Expr _SYMB_1 
            {
              javalette.Absyn.Expr RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		javalette.Absyn.Expr p_2 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr6",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Dim ::= _SYMB_12 Expr _SYMB_13 
            {
              javalette.Absyn.Dim RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		javalette.Absyn.Expr p_2 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.ArrDim(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dim",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ListDim ::= Dim 
            {
              javalette.Absyn.ListDim RESULT =null;
		javalette.Absyn.Dim p_1 = (javalette.Absyn.Dim)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.ListDim(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDim",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ListDim ::= Dim ListDim 
            {
              javalette.Absyn.ListDim RESULT =null;
		javalette.Absyn.Dim p_1 = (javalette.Absyn.Dim)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		javalette.Absyn.ListDim p_2 = (javalette.Absyn.ListDim)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDim",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr5 ::= _SYMB_14 Expr6 
            {
              javalette.Absyn.Expr RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		javalette.Absyn.Expr p_2 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.Neg(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr5",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr5 ::= _SYMB_15 Expr6 
            {
              javalette.Absyn.Expr RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		javalette.Absyn.Expr p_2 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.Not(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr5",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr5 ::= Expr6 
            {
              javalette.Absyn.Expr RESULT =null;
		javalette.Absyn.Expr p_1 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr5",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr4 ::= Expr4 MulOp Expr5 
            {
              javalette.Absyn.Expr RESULT =null;
		javalette.Absyn.Expr p_1 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		javalette.Absyn.MulOp p_2 = (javalette.Absyn.MulOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		javalette.Absyn.Expr p_3 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.EMul(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr4 ::= Expr5 
            {
              javalette.Absyn.Expr RESULT =null;
		javalette.Absyn.Expr p_1 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr3 ::= Expr3 AddOp Expr4 
            {
              javalette.Absyn.Expr RESULT =null;
		javalette.Absyn.Expr p_1 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		javalette.Absyn.AddOp p_2 = (javalette.Absyn.AddOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		javalette.Absyn.Expr p_3 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.EAdd(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr3 ::= Expr4 
            {
              javalette.Absyn.Expr RESULT =null;
		javalette.Absyn.Expr p_1 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr2 ::= Expr2 RelOp Expr3 
            {
              javalette.Absyn.Expr RESULT =null;
		javalette.Absyn.Expr p_1 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		javalette.Absyn.RelOp p_2 = (javalette.Absyn.RelOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		javalette.Absyn.Expr p_3 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.ERel(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr2 ::= Expr3 
            {
              javalette.Absyn.Expr RESULT =null;
		javalette.Absyn.Expr p_1 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr1 ::= Expr2 _SYMB_16 Expr1 
            {
              javalette.Absyn.Expr RESULT =null;
		javalette.Absyn.Expr p_1 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		javalette.Absyn.Expr p_3 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.EAnd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr1 ::= Expr2 
            {
              javalette.Absyn.Expr RESULT =null;
		javalette.Absyn.Expr p_1 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= Expr1 _SYMB_17 Expr 
            {
              javalette.Absyn.Expr RESULT =null;
		javalette.Absyn.Expr p_1 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		javalette.Absyn.Expr p_3 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.EOr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Expr1 
            {
              javalette.Absyn.Expr RESULT =null;
		javalette.Absyn.Expr p_1 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ListExpr ::= 
            {
              javalette.Absyn.ListExpr RESULT =null;
		 RESULT = new javalette.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ListExpr ::= Expr 
            {
              javalette.Absyn.ListExpr RESULT =null;
		javalette.Absyn.Expr p_1 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ListExpr ::= Expr _SYMB_2 ListExpr 
            {
              javalette.Absyn.ListExpr RESULT =null;
		javalette.Absyn.Expr p_1 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		javalette.Absyn.ListExpr p_3 = (javalette.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Lhs ::= _IDENT_ 
            {
              javalette.Absyn.Lhs RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.LhsVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lhs",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Lhs ::= Index 
            {
              javalette.Absyn.Lhs RESULT =null;
		javalette.Absyn.Index p_1 = (javalette.Absyn.Index)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.LhsArray(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lhs",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Index ::= Expr6 _SYMB_12 Expr _SYMB_13 
            {
              javalette.Absyn.Index RESULT =null;
		javalette.Absyn.Expr p_1 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		javalette.Absyn.Expr p_3 = (javalette.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.ArrInd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Index",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // AddOp ::= _SYMB_18 
            {
              javalette.Absyn.AddOp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.Plus(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AddOp",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // AddOp ::= _SYMB_14 
            {
              javalette.Absyn.AddOp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.Minus(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AddOp",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // MulOp ::= _SYMB_19 
            {
              javalette.Absyn.MulOp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.Times(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MulOp",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MulOp ::= _SYMB_20 
            {
              javalette.Absyn.MulOp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.Div(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MulOp",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MulOp ::= _SYMB_21 
            {
              javalette.Absyn.MulOp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.Mod(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MulOp",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // RelOp ::= _SYMB_22 
            {
              javalette.Absyn.RelOp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.LTH(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // RelOp ::= _SYMB_23 
            {
              javalette.Absyn.RelOp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.LE(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // RelOp ::= _SYMB_24 
            {
              javalette.Absyn.RelOp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.GTH(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RelOp ::= _SYMB_25 
            {
              javalette.Absyn.RelOp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.GE(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RelOp ::= _SYMB_26 
            {
              javalette.Absyn.RelOp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.EQU(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // RelOp ::= _SYMB_27 
            {
              javalette.Absyn.RelOp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new javalette.Absyn.NE(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",26, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

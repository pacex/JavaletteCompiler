// File generated by the BNF Converter (bnfc 2.9.4).

package javalette;
/** Composition Visitor
*/

public class ComposVisitor<A> implements
  javalette.Absyn.Prog.Visitor<javalette.Absyn.Prog,A>,
  javalette.Absyn.TopDef.Visitor<javalette.Absyn.TopDef,A>,
  javalette.Absyn.Arg.Visitor<javalette.Absyn.Arg,A>,
  javalette.Absyn.Blk.Visitor<javalette.Absyn.Blk,A>,
  javalette.Absyn.Stmt.Visitor<javalette.Absyn.Stmt,A>,
  javalette.Absyn.Item.Visitor<javalette.Absyn.Item,A>,
  javalette.Absyn.Type.Visitor<javalette.Absyn.Type,A>,
  javalette.Absyn.Expr.Visitor<javalette.Absyn.Expr,A>,
  javalette.Absyn.AddOp.Visitor<javalette.Absyn.AddOp,A>,
  javalette.Absyn.MulOp.Visitor<javalette.Absyn.MulOp,A>,
  javalette.Absyn.RelOp.Visitor<javalette.Absyn.RelOp,A>
{
    /* Prog */
    public javalette.Absyn.Prog visit(javalette.Absyn.Program p, A arg)
    {
      javalette.Absyn.ListTopDef listtopdef_ = new javalette.Absyn.ListTopDef();
      for (javalette.Absyn.TopDef x : p.listtopdef_)
      {
        listtopdef_.add(x.accept(this,arg));
      }
      return new javalette.Absyn.Program(listtopdef_);
    }

    /* TopDef */
    public javalette.Absyn.TopDef visit(javalette.Absyn.FnDef p, A arg)
    {
      javalette.Absyn.Type type_ = p.type_.accept(this, arg);
      String ident_ = p.ident_;
      javalette.Absyn.ListArg listarg_ = new javalette.Absyn.ListArg();
      for (javalette.Absyn.Arg x : p.listarg_)
      {
        listarg_.add(x.accept(this,arg));
      }
      javalette.Absyn.Blk blk_ = p.blk_.accept(this, arg);
      return new javalette.Absyn.FnDef(type_, ident_, listarg_, blk_);
    }

    /* Arg */
    public javalette.Absyn.Arg visit(javalette.Absyn.Argument p, A arg)
    {
      javalette.Absyn.Type type_ = p.type_.accept(this, arg);
      String ident_ = p.ident_;
      return new javalette.Absyn.Argument(type_, ident_);
    }

    /* Blk */
    public javalette.Absyn.Blk visit(javalette.Absyn.Block p, A arg)
    {
      javalette.Absyn.ListStmt liststmt_ = new javalette.Absyn.ListStmt();
      for (javalette.Absyn.Stmt x : p.liststmt_)
      {
        liststmt_.add(x.accept(this,arg));
      }
      return new javalette.Absyn.Block(liststmt_);
    }

    /* Stmt */
    public javalette.Absyn.Stmt visit(javalette.Absyn.Empty p, A arg)
    {
      return new javalette.Absyn.Empty();
    }
    public javalette.Absyn.Stmt visit(javalette.Absyn.BStmt p, A arg)
    {
      javalette.Absyn.Blk blk_ = p.blk_.accept(this, arg);
      return new javalette.Absyn.BStmt(blk_);
    }
    public javalette.Absyn.Stmt visit(javalette.Absyn.Decl p, A arg)
    {
      javalette.Absyn.Type type_ = p.type_.accept(this, arg);
      javalette.Absyn.ListItem listitem_ = new javalette.Absyn.ListItem();
      for (javalette.Absyn.Item x : p.listitem_)
      {
        listitem_.add(x.accept(this,arg));
      }
      return new javalette.Absyn.Decl(type_, listitem_);
    }
    public javalette.Absyn.Stmt visit(javalette.Absyn.Ass p, A arg)
    {
      String ident_ = p.ident_;
      javalette.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      return new javalette.Absyn.Ass(ident_, expr_);
    }
    public javalette.Absyn.Stmt visit(javalette.Absyn.Incr p, A arg)
    {
      String ident_ = p.ident_;
      return new javalette.Absyn.Incr(ident_);
    }
    public javalette.Absyn.Stmt visit(javalette.Absyn.Decr p, A arg)
    {
      String ident_ = p.ident_;
      return new javalette.Absyn.Decr(ident_);
    }
    public javalette.Absyn.Stmt visit(javalette.Absyn.Ret p, A arg)
    {
      javalette.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      return new javalette.Absyn.Ret(expr_);
    }
    public javalette.Absyn.Stmt visit(javalette.Absyn.VRet p, A arg)
    {
      return new javalette.Absyn.VRet();
    }
    public javalette.Absyn.Stmt visit(javalette.Absyn.Cond p, A arg)
    {
      javalette.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      javalette.Absyn.Stmt stmt_ = p.stmt_.accept(this, arg);
      return new javalette.Absyn.Cond(expr_, stmt_);
    }
    public javalette.Absyn.Stmt visit(javalette.Absyn.CondElse p, A arg)
    {
      javalette.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      javalette.Absyn.Stmt stmt_1 = p.stmt_1.accept(this, arg);
      javalette.Absyn.Stmt stmt_2 = p.stmt_2.accept(this, arg);
      return new javalette.Absyn.CondElse(expr_, stmt_1, stmt_2);
    }
    public javalette.Absyn.Stmt visit(javalette.Absyn.While p, A arg)
    {
      javalette.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      javalette.Absyn.Stmt stmt_ = p.stmt_.accept(this, arg);
      return new javalette.Absyn.While(expr_, stmt_);
    }
    public javalette.Absyn.Stmt visit(javalette.Absyn.SExp p, A arg)
    {
      javalette.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      return new javalette.Absyn.SExp(expr_);
    }

    /* Item */
    public javalette.Absyn.Item visit(javalette.Absyn.NoInit p, A arg)
    {
      String ident_ = p.ident_;
      return new javalette.Absyn.NoInit(ident_);
    }
    public javalette.Absyn.Item visit(javalette.Absyn.Init p, A arg)
    {
      String ident_ = p.ident_;
      javalette.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      return new javalette.Absyn.Init(ident_, expr_);
    }

    /* Type */
    public javalette.Absyn.Type visit(javalette.Absyn.Int p, A arg)
    {
      return new javalette.Absyn.Int();
    }
    public javalette.Absyn.Type visit(javalette.Absyn.Doub p, A arg)
    {
      return new javalette.Absyn.Doub();
    }
    public javalette.Absyn.Type visit(javalette.Absyn.Bool p, A arg)
    {
      return new javalette.Absyn.Bool();
    }
    public javalette.Absyn.Type visit(javalette.Absyn.Void p, A arg)
    {
      return new javalette.Absyn.Void();
    }
    public javalette.Absyn.Type visit(javalette.Absyn.Fun p, A arg)
    {
      javalette.Absyn.Type type_ = p.type_.accept(this, arg);
      javalette.Absyn.ListType listtype_ = new javalette.Absyn.ListType();
      for (javalette.Absyn.Type x : p.listtype_)
      {
        listtype_.add(x.accept(this,arg));
      }
      return new javalette.Absyn.Fun(type_, listtype_);
    }

    /* Expr */
    public javalette.Absyn.Expr visit(javalette.Absyn.EVar p, A arg)
    {
      String ident_ = p.ident_;
      return new javalette.Absyn.EVar(ident_);
    }
    public javalette.Absyn.Expr visit(javalette.Absyn.ELitInt p, A arg)
    {
      Integer integer_ = p.integer_;
      return new javalette.Absyn.ELitInt(integer_);
    }
    public javalette.Absyn.Expr visit(javalette.Absyn.ELitDoub p, A arg)
    {
      Double double_ = p.double_;
      return new javalette.Absyn.ELitDoub(double_);
    }
    public javalette.Absyn.Expr visit(javalette.Absyn.ELitTrue p, A arg)
    {
      return new javalette.Absyn.ELitTrue();
    }
    public javalette.Absyn.Expr visit(javalette.Absyn.ELitFalse p, A arg)
    {
      return new javalette.Absyn.ELitFalse();
    }
    public javalette.Absyn.Expr visit(javalette.Absyn.EApp p, A arg)
    {
      String ident_ = p.ident_;
      javalette.Absyn.ListExpr listexpr_ = new javalette.Absyn.ListExpr();
      for (javalette.Absyn.Expr x : p.listexpr_)
      {
        listexpr_.add(x.accept(this,arg));
      }
      return new javalette.Absyn.EApp(ident_, listexpr_);
    }
    public javalette.Absyn.Expr visit(javalette.Absyn.EString p, A arg)
    {
      String string_ = p.string_;
      return new javalette.Absyn.EString(string_);
    }
    public javalette.Absyn.Expr visit(javalette.Absyn.Neg p, A arg)
    {
      javalette.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      return new javalette.Absyn.Neg(expr_);
    }
    public javalette.Absyn.Expr visit(javalette.Absyn.Not p, A arg)
    {
      javalette.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      return new javalette.Absyn.Not(expr_);
    }
    public javalette.Absyn.Expr visit(javalette.Absyn.EMul p, A arg)
    {
      javalette.Absyn.Expr expr_1 = p.expr_1.accept(this, arg);
      javalette.Absyn.MulOp mulop_ = p.mulop_.accept(this, arg);
      javalette.Absyn.Expr expr_2 = p.expr_2.accept(this, arg);
      return new javalette.Absyn.EMul(expr_1, mulop_, expr_2);
    }
    public javalette.Absyn.Expr visit(javalette.Absyn.EAdd p, A arg)
    {
      javalette.Absyn.Expr expr_1 = p.expr_1.accept(this, arg);
      javalette.Absyn.AddOp addop_ = p.addop_.accept(this, arg);
      javalette.Absyn.Expr expr_2 = p.expr_2.accept(this, arg);
      return new javalette.Absyn.EAdd(expr_1, addop_, expr_2);
    }
    public javalette.Absyn.Expr visit(javalette.Absyn.ERel p, A arg)
    {
      javalette.Absyn.Expr expr_1 = p.expr_1.accept(this, arg);
      javalette.Absyn.RelOp relop_ = p.relop_.accept(this, arg);
      javalette.Absyn.Expr expr_2 = p.expr_2.accept(this, arg);
      return new javalette.Absyn.ERel(expr_1, relop_, expr_2);
    }
    public javalette.Absyn.Expr visit(javalette.Absyn.EAnd p, A arg)
    {
      javalette.Absyn.Expr expr_1 = p.expr_1.accept(this, arg);
      javalette.Absyn.Expr expr_2 = p.expr_2.accept(this, arg);
      return new javalette.Absyn.EAnd(expr_1, expr_2);
    }
    public javalette.Absyn.Expr visit(javalette.Absyn.EOr p, A arg)
    {
      javalette.Absyn.Expr expr_1 = p.expr_1.accept(this, arg);
      javalette.Absyn.Expr expr_2 = p.expr_2.accept(this, arg);
      return new javalette.Absyn.EOr(expr_1, expr_2);
    }

    /* AddOp */
    public javalette.Absyn.AddOp visit(javalette.Absyn.Plus p, A arg)
    {
      return new javalette.Absyn.Plus();
    }
    public javalette.Absyn.AddOp visit(javalette.Absyn.Minus p, A arg)
    {
      return new javalette.Absyn.Minus();
    }

    /* MulOp */
    public javalette.Absyn.MulOp visit(javalette.Absyn.Times p, A arg)
    {
      return new javalette.Absyn.Times();
    }
    public javalette.Absyn.MulOp visit(javalette.Absyn.Div p, A arg)
    {
      return new javalette.Absyn.Div();
    }
    public javalette.Absyn.MulOp visit(javalette.Absyn.Mod p, A arg)
    {
      return new javalette.Absyn.Mod();
    }

    /* RelOp */
    public javalette.Absyn.RelOp visit(javalette.Absyn.LTH p, A arg)
    {
      return new javalette.Absyn.LTH();
    }
    public javalette.Absyn.RelOp visit(javalette.Absyn.LE p, A arg)
    {
      return new javalette.Absyn.LE();
    }
    public javalette.Absyn.RelOp visit(javalette.Absyn.GTH p, A arg)
    {
      return new javalette.Absyn.GTH();
    }
    public javalette.Absyn.RelOp visit(javalette.Absyn.GE p, A arg)
    {
      return new javalette.Absyn.GE();
    }
    public javalette.Absyn.RelOp visit(javalette.Absyn.EQU p, A arg)
    {
      return new javalette.Absyn.EQU();
    }
    public javalette.Absyn.RelOp visit(javalette.Absyn.NE p, A arg)
    {
      return new javalette.Absyn.NE();
    }
}
